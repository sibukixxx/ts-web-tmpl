generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:postgres@localhost:54322/postgres"
}

// ----------------- Enums -----------------

enum PlanType {
  FREE
  PAID_NORMAL
  PAID_FULL
  CUSTOM
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

// ----------------- Models -----------------

enum AuthProvider {
  LOCAL
  GOOGLE
}

//
// RBAC: Role, Permission, RolePermission, UserRole の関係
//
model Role {
  id              Int              @id @default(autoincrement())
  name            String           @unique
  rolePermissions RolePermission[]
  userRoles       UserRole[]

  @@map("roles")
}

model Permission {
  id              Int              @id @default(autoincrement())
  code            String           @unique
  name            String
  rolePermissions RolePermission[]

  @@map("permissions")
}

model RolePermission {
  id           Int @id @default(autoincrement())
  roleId       Int
  permissionId Int

  role       Role       @relation(fields: [roleId], references: [id])
  permission Permission @relation(fields: [permissionId], references: [id])

  // 1つのロールが同じパーミッションを複数回持たないようユニーク制約
  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

model UserRole {
  id     Int @id @default(autoincrement())
  userId Int
  roleId Int

  user User @relation(fields: [userId], references: [id])
  role Role @relation(fields: [roleId], references: [id])

  // 1つのユーザーが同じロールを重複して持たないように
  @@unique([userId, roleId])
  @@map("user_roles")
}

// ユーザー
model User {
  id            Int          @id @default(autoincrement())
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt // レコード更新時に自動で更新される
  email         String       @unique
  emailVerified Boolean      @default(false) // メールアドレス確認済みかどうか
  name          String? // Display名など
  googleId      String?      @unique // Google OAuth ユーザーIDを保持(重複防止のためunique)
  passwordHash  String? // ローカルログイン時のみ使用（OAuthでは不要）
  avatarUrl     String? // プロフィール画像URL
  bio           String? // 自己紹介など
  provider      AuthProvider @default(LOCAL) // デフォルトはLOCAL, もしくはGOOGLE

  // RBAC: ユーザーが複数のロールを持てるようにする場合のリレーション
  userRoles UserRole[]

  // Group機能: ユーザーは複数のグループに属する可能性があるため中間テーブル
  userGroups UserGroup[]

  // Token関連: 1:N (ユーザーは複数のトークンを持ち得る)
  UserToken UserToken[]

  // Subscription とのリレーション (1:N)
  subscriptions Subscription[]

  teamMembers  TeamMember[]
  invitations  Invitation[]  @relation("InvitedByUser")
  activityLogs ActivityLog[]

  // 実際のDBテーブル物理名を "users" にする
  @@map("users")
}

model UserToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  type      String // e.g. "email_verify", "password_reset"
  expiresAt DateTime
  createdAt DateTime @default(now())

  // User とのリレーション (1:N)
  userId Int
  user   User @relation(fields: [userId], references: [id])

  @@map("user_tokens")
}

// グループ
model Group {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  name          String?
  isPlaceholder Boolean  @default(true)
  // グループが本格利用されるかどうか、あるいは別のフラグ等に書き換えてもOK

  // Group に所属するユーザーとのリレーション
  userGroups   UserGroup[]
  Subscription Subscription[]

  @@map("groups")
}

model UserGroup {
  id      Int @id @default(autoincrement())
  userId  Int
  groupId Int

  user  User  @relation(fields: [userId], references: [id])
  group Group @relation(fields: [groupId], references: [id])

  // 1ユーザーと1グループの重複紐付けを防ぐ
  @@unique([userId, groupId])
  @@map("user_groups")
}

//
// 退会（解約）したユーザーの履歴テーブル
//
model DeletedUser {
  id        Int      @id @default(autoincrement())
  userId    Int
  email     String
  deletedAt DateTime @default(now())
  reason    String?

  @@map("deleted_users")
}

// プラン (無料 / 有料 / カスタム など)
model Plan {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  planType  PlanType
  price     Int? // null 可: カスタムプランなどで値段が未定の場合
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Subscription とのリレーション (1:N)
  subscriptions Subscription[]

  // 実際のDBテーブル物理名を "plans" にする
  @@map("plans")
}

// サブスクリプション (誰が / どのグループが / どのプランを契約しているか)
model Subscription {
  id Int @id @default(autoincrement())

  // 紐づくPlan
  planId Int
  plan   Plan @relation(fields: [planId], references: [id])

  // 紐づく User (オプション)
  userId Int?
  user   User? @relation(fields: [userId], references: [id])

  // 紐づく Group (オプション)
  groupId Int?
  group   Group? @relation(fields: [groupId], references: [id])

  startedAt DateTime  @default(now())
  endedAt   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Billing とのリレーション (1:N)
  billings Billing[]

  // 実際のDBテーブル物理名を "subscriptions" にする
  @@map("subscriptions")
}

// 請求 / 売上情報 (課金履歴) を管理するテーブル
model Billing {
  id             Int          @id @default(autoincrement())
  subscriptionId Int
  subscription   Subscription @relation(fields: [subscriptionId], references: [id])

  // 実際に請求/支払われた金額 (無料プランなら 0円)
  amount Int

  // 通貨 (必要な場合のみ)
  currency String?

  // 決済ステータス
  status PaymentStatus

  // 決済方法や備考 (クレカ, 銀行振込, etc.)
  paymentMethod String?
  note          String?

  // 請求周期・期間など (月次/年次など)
  billingPeriodStart DateTime?
  billingPeriodEnd   DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 実際のDBテーブル物理名を "billings" にする
  @@map("billings")
}

model Team {
  id                   Int           @id @default(autoincrement())
  name                 String        @db.VarChar(100)
  createdAt            DateTime      @default(now()) @map("created_at")
  updatedAt            DateTime      @default(now()) @map("updated_at")
  stripeCustomerId     String?       @unique @map("stripe_customer_id")
  stripeSubscriptionId String?       @unique @map("stripe_subscription_id")
  stripeProductId      String?       @map("stripe_product_id")
  planName             String?       @map("plan_name") @db.VarChar(50)
  subscriptionStatus   String?       @map("subscription_status") @db.VarChar(20)
  teamMembers          TeamMember[]
  activityLogs         ActivityLog[]
  invitations          Invitation[]

  @@map("teams")
}

model TeamMember {
  id       Int      @id @default(autoincrement())
  userId   Int      @map("user_id")
  teamId   Int      @map("team_id")
  role     String   @db.VarChar(50)
  joinedAt DateTime @default(now()) @map("joined_at")
  user     User     @relation(fields: [userId], references: [id])
  team     Team     @relation(fields: [teamId], references: [id])

  @@map("team_members")
}

model ActivityLog {
  id        Int      @id @default(autoincrement())
  teamId    Int      @map("team_id")
  userId    Int?     @map("user_id")
  action    String
  timestamp DateTime @default(now())
  ipAddress String?  @map("ip_address") @db.VarChar(45)
  team      Team     @relation(fields: [teamId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])

  @@map("activity_logs")
}

model Invitation {
  id        Int      @id @default(autoincrement())
  teamId    Int      @map("team_id")
  email     String   @db.VarChar(255)
  role      String   @db.VarChar(50)
  invitedBy Int      @map("invited_by")
  invitedAt DateTime @default(now()) @map("invited_at")
  status    String   @default("pending") @db.VarChar(20)
  team      Team     @relation(fields: [teamId], references: [id])
  inviter   User     @relation("InvitedByUser", fields: [invitedBy], references: [id])

  @@map("invitations")
}

enum ActivityType {
  SIGN_UP
  SIGN_IN
  SIGN_OUT
  UPDATE_PASSWORD
  DELETE_ACCOUNT
  UPDATE_ACCOUNT
  CREATE_TEAM
  REMOVE_TEAM_MEMBER
  INVITE_TEAM_MEMBER
  ACCEPT_INVITATION
}
